<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分搜索-解题思路</title>
      <link href="/guaBlog/2022/10/27/algorithm/binarySearch/01_solution/"/>
      <url>/guaBlog/2022/10/27/algorithm/binarySearch/01_solution/</url>
      
        <content type="html"><![CDATA[<h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><blockquote><p>在计算机科学中，二进制搜索，也被称为折半搜索算法，是一种搜索算法，每次搜索都能排除掉一半的不存在目标结果的集合，所以在最坏情况下，经过$log(n)$次搜索，得到最终结果。</p></blockquote><h2 id="解题实例"><a href="#解题实例" class="headerlink" title="解题实例"></a>解题实例</h2><p>如何将二分搜索以代码的形式，转化为解决某几类问题的利器呢？下面以两种类型的题目为例，总结出一种通用的解题思路。</p><h3 id="1-搜索某个值"><a href="#1-搜索某个值" class="headerlink" title="1.搜索某个值"></a>1.搜索某个值</h3><p><a href="https://leetcode.cn/problems/search-insert-position/">搜索插入位置</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 搜索区间为[left, right]</span></span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            val = nums[mid]</span><br><span class="line">            <span class="keyword">if</span> val == target:  <span class="comment"># 找到目标值</span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> val &gt; target:</span><br><span class="line">                right = mid - <span class="number">1</span>  <span class="comment"># 目标值在mid左侧，更新搜索区间为[left, mid - 1]</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span>  <span class="comment"># 目标值在mid右侧，更新搜索区间为[mid + 1, right]</span></span><br><span class="line">        <span class="comment"># 当left=right时，mid=left=right</span></span><br><span class="line">        <span class="comment"># 如果val &gt; target, target应该插入到mid前面(target下标为mid)，接着right=mid-1,left=mid跳出循环，结果为left</span></span><br><span class="line">        <span class="comment"># 如果val &lt; target, target应该插入到mid后面(target下标为mid+1)，接着left=mid+1,right=mid跳出循环，结果为left</span></span><br><span class="line">        <span class="comment"># 所以最终返回都是left</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-求左（右）边界值"><a href="#2-求左（右）边界值" class="headerlink" title="2.求左（右）边界值"></a>2.求左（右）边界值</h3><p><a href="https://leetcode.cn/problems/first-bad-version/">第一个错误的版本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The isBadVersion API is already defined for you.</span></span><br><span class="line"><span class="comment"># def isBadVersion(version: int) -&gt; bool:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstBadVersion</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        right = n</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 搜索区间[left, right]</span></span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> isBadVersion(mid):  <span class="comment"># 是错误版本，则新区间为[left, mid-1]</span></span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不是错误版本，则新区间为[mid+1, right]</span></span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>可以看出，二分搜索是可以总结出固定的解题思路，快速写出解题代码。</p><ol><li><p>确定搜索区间为$[left, right]$，注意是两边都闭的区间（当然也可以是$[left, right)$的区间，不过此时区间的初始值会不同，这个可以自己去想一想）</p></li><li><p>缩小区间 </p><ul><li>$mid$在所求值左边，下一搜索区间为$[left, mid-1]$</li><li>$mid$在所求值右边，下一搜素区间为$[mid+1, right]$</li><li>$mid$等于所求值，<ul><li>求确定值则直接返回$mid$</li><li>求左边界，则归属为第一种情况</li><li>求右边界，则归属为第二种情况</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
