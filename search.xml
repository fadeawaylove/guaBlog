<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/guaBlog/2022/10/28/algorithm/binarySearch/05_find-first-and-last-position-of-element-in-sorted-array/"/>
      <url>/guaBlog/2022/10/28/algorithm/binarySearch/05_find-first-and-last-position-of-element-in-sorted-array/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>数组是排序数组，要求$target$值的最小和最大下标，直接套用二分法模板。</p></blockquote><p>以求$target$的最小下标为例:</p><ol><li>搜索区间$[left, rigt]$的闭区间，初始值为$[0, len(nums)-1]$</li><li>$nums[mid] = target$，则区间左移，$right=mid-1$</li><li>$nums[mid] \lt target$，则区间左移，$right=mid-1$</li><li>$nums[mid] \gt target$，则区间右移，$left=mid+1$</li></ol><p>其实只要仔细分析每次搜索区间的缩小条件，问题就会变得很简单。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>完全按照思路分析中的步骤，用代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求左边界</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt;= target:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        lr = left <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> nums[left] == target <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求右边界</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        rr = right <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> nums[right] == target <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [lr, rr] <span class="keyword">if</span> nums[lr] == nums[rr] <span class="keyword">else</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><p>可以看到上述代码有很多重复的部分，咱们可以稍微优化一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_search</span>(<span class="params">is_lower=<span class="literal">False</span></span>):</span><br><span class="line">            left, right = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">                mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                    <span class="keyword">if</span> is_lower:</span><br><span class="line">                        right = mid - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[mid] &gt; target:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">            res = left <span class="keyword">if</span> is_lower <span class="keyword">else</span> right</span><br><span class="line">            <span class="keyword">return</span> res <span class="keyword">if</span> res &lt; n <span class="keyword">and</span> nums[res] == target <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [_search(is_lower=<span class="literal">True</span>), _search()]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索-搜索旋转排序数组</title>
      <link href="/guaBlog/2022/10/27/algorithm/binarySearch/04_search-in-rotated-sorted-array/"/>
      <url>/guaBlog/2022/10/27/algorithm/binarySearch/04_search-in-rotated-sorted-array/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>此题是很明显的二分法求确切值，思考方法跟求边界值略有不同</p><ul><li>首先可以确定循环条件为$[left,right]$，因为既然是求明确值，那么肯定是$left$和$right$的闭区间（$left$和$right$的值也被包含进去）</li><li>然后再确定左右边界的移动方式<ul><li>假定当前$mid$不符合（$left$右移），此时可能符合条件的区间应$[mid+1, right]$（需要将$mid$排除在外，因为$mid$已经不符合了）</li><li>同理当$mid$不符合（$right$左移）也是一样，此时符合区间应为$[left,mid-1]$</li></ul></li></ul><p>再回归到此题，此题的不同之处是，将原本有序的序列进行了旋转，变为了两个有序的序列，乍看起来不太好做，实际上一分析，做法还是相同，只要根据条件判断每一次$left$右移和$right$左移的条件就行了。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        lv = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            t = nums[mid]</span><br><span class="line">            <span class="keyword">if</span> t == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> target &gt;= lv:  <span class="comment"># 左半边</span></span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt;= t &lt; target:  <span class="comment"># 右移</span></span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 右半边</span></span><br><span class="line">                <span class="keyword">if</span> nums[right] &gt;= t &gt; target:  <span class="comment"># 左移</span></span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索-在D天内送达包裹的能力</title>
      <link href="/guaBlog/2022/10/27/algorithm/binarySearch/03_capacity-to-ship-packages-within-d-days/"/>
      <url>/guaBlog/2022/10/27/algorithm/binarySearch/03_capacity-to-ship-packages-within-d-days/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="在-D-天内送达包裹的能力"><a href="#在-D-天内送达包裹的能力" class="headerlink" title="在 D 天内送达包裹的能力"></a><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/">在 D 天内送达包裹的能力</a></h4><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>搜索区间为$[left, right]$，初始$left=max(weights)$，$right=sum(weights)$   </p><ul><li>能运送完，下一搜索区间$[left, mid-1]$   </li><li>不能送完，下一搜索区间$[mid+1, right]$    </li></ul></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shipWithinDays</span>(<span class="params">self, weights: <span class="type">List</span>[<span class="built_in">int</span>], days: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">can_finish</span>(<span class="params">w</span>):</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> weight <span class="keyword">in</span> weights:</span><br><span class="line">                temp += weight</span><br><span class="line">                <span class="keyword">if</span> temp &gt; w:</span><br><span class="line">                    temp = weight</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> cnt &lt;= days</span><br><span class="line"></span><br><span class="line">        left = <span class="built_in">max</span>(weights)</span><br><span class="line">        right = <span class="built_in">sum</span>(weights)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> can_finish(mid):</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索-爱吃香蕉的珂珂</title>
      <link href="/guaBlog/2022/10/27/algorithm/binarySearch/02_koko-eating-bananas/"/>
      <url>/guaBlog/2022/10/27/algorithm/binarySearch/02_koko-eating-bananas/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="爱吃香蕉的珂珂"><a href="#爱吃香蕉的珂珂" class="headerlink" title="爱吃香蕉的珂珂"></a><a href="https://leetcode-cn.com/problems/koko-eating-bananas/">爱吃香蕉的珂珂</a></h4><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>要求返回在 <code>h</code> 小时内吃掉所有香蕉的最小速度 <code>k</code>（<code>k</code> 为整数），转化一下等同于求右区间的左边界。</p><blockquote><p>一般二分搜索都需要一个有序数列，此题没有有序数列，那怎么办呢？<br>观察可知，如果有一个函数$f(k)$来表示当吃香蕉速度为$k$时，吃完所有香蕉所用的时间，那么$f(k)$是随着$k$单调递减的。<br>只有知道了单调性，我们才能通过大小比较，来进行搜索区间的缩小。  </p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minEatingSpeed</span>(<span class="params">self, piles: <span class="type">List</span>[<span class="built_in">int</span>], h: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断当前速度k，能否在h小时内吃完</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_can_finish</span>(<span class="params">x</span>):</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> piles:</span><br><span class="line">                cnt += p // x </span><br><span class="line">                <span class="keyword">if</span> p % x:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> cnt &lt;= h</span><br><span class="line"></span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        right = <span class="built_in">max</span>(piles)</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 如果能吃完，需要看更小的速度能不能吃完，则目标值在mid左侧，right左移</span></span><br><span class="line">            <span class="keyword">if</span> _can_finish(mid):  </span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果不能吃完，需要看更大的速度能否吃完，则目标值在mid右侧，left右移</span></span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 想想，为什么最后是返回left？</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索-解题思路</title>
      <link href="/guaBlog/2022/10/27/algorithm/binarySearch/01_solution/"/>
      <url>/guaBlog/2022/10/27/algorithm/binarySearch/01_solution/</url>
      
        <content type="html"><![CDATA[<h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><blockquote><p>在计算机科学中，二进制搜索，也被称为折半搜索算法，是一种搜索算法，每次搜索都能排除掉一半的不存在目标结果的集合，所以在最坏情况下，经过$log(n)$次搜索，得到最终结果。</p></blockquote><h2 id="解题实例"><a href="#解题实例" class="headerlink" title="解题实例"></a>解题实例</h2><p>如何将二分搜索以代码的形式，转化为解决某几类问题的利器呢？下面以两种类型的题目为例，总结出一种通用的解题思路。</p><h3 id="1-搜索某个值"><a href="#1-搜索某个值" class="headerlink" title="1.搜索某个值"></a>1.搜索某个值</h3><p><a href="https://leetcode.cn/problems/search-insert-position/">搜索插入位置</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 搜索区间为[left, right]</span></span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            val = nums[mid]</span><br><span class="line">            <span class="keyword">if</span> val == target:  <span class="comment"># 找到目标值</span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> val &gt; target:</span><br><span class="line">                right = mid - <span class="number">1</span>  <span class="comment"># 目标值在mid左侧，更新搜索区间为[left, mid - 1]</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span>  <span class="comment"># 目标值在mid右侧，更新搜索区间为[mid + 1, right]</span></span><br><span class="line">        <span class="comment"># 当left=right时，mid=left=right</span></span><br><span class="line">        <span class="comment"># 如果val &gt; target, target应该插入到mid前面(target下标为mid)，接着right=mid-1,left=mid跳出循环，结果为left</span></span><br><span class="line">        <span class="comment"># 如果val &lt; target, target应该插入到mid后面(target下标为mid+1)，接着left=mid+1,right=mid跳出循环，结果为left</span></span><br><span class="line">        <span class="comment"># 所以最终返回都是left</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-求左（右）边界值"><a href="#2-求左（右）边界值" class="headerlink" title="2.求左（右）边界值"></a>2.求左（右）边界值</h3><p><a href="https://leetcode.cn/problems/first-bad-version/">第一个错误的版本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The isBadVersion API is already defined for you.</span></span><br><span class="line"><span class="comment"># def isBadVersion(version: int) -&gt; bool:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstBadVersion</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        right = n</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 搜索区间[left, right]</span></span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> isBadVersion(mid):  <span class="comment"># 是错误版本，则新区间为[left, mid-1]</span></span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不是错误版本，则新区间为[mid+1, right]</span></span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>可以看出，二分搜索是可以总结出固定的解题思路，快速写出解题代码。</p><ol><li><p>确定搜索区间为$[left, right]$，注意是两边都闭的区间（当然也可以是$[left, right)$的区间，不过此时区间的初始值会不同，这个可以自己去想一想）</p></li><li><p>缩小区间 </p><ul><li>$mid$在所求值左边，下一搜索区间为$[left, mid-1]$</li><li>$mid$在所求值右边，下一搜素区间为$[mid+1, right]$</li><li>$mid$等于所求值，<ul><li>求确定值则直接返回$mid$</li><li>求左边界，则归属为第一种情况</li><li>求右边界，则归属为第二种情况</li></ul></li></ul></li></ol><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:  <span class="comment"># 固定用&lt;=两端都闭区间，避免开左闭右开不易记忆</span></span><br><span class="line">    mid = left + (right - left) // <span class="number">2</span>  <span class="comment"># 不用(left+right)//2，可以避免溢出</span></span><br><span class="line">    <span class="comment"># 根据条件决定区间如何缩小</span></span><br><span class="line">    <span class="comment"># left往右移，则left=mid+1</span></span><br><span class="line">    <span class="comment"># right往左移，则right=mid-1</span></span><br><span class="line">    <span class="comment"># 根据具体题意来定</span></span><br><span class="line">    <span class="keyword">if</span> mid == target:</span><br><span class="line">        <span class="comment"># do_something</span></span><br><span class="line">    <span class="keyword">elif</span> mid &gt; target:</span><br><span class="line">        <span class="comment"># do_something</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># do_something</span></span><br><span class="line"><span class="comment"># 最后一次循环，left=right=mid，三个值相等</span></span><br><span class="line"><span class="comment"># left右移，left加1,</span></span><br><span class="line"><span class="comment">#   最终mid=right=left-1</span></span><br><span class="line"><span class="comment"># right左移，right减1</span></span><br><span class="line"><span class="comment">#   最终mid=left=right+1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 没事撸撸算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分搜索 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
